services:
  reverse-ports:
    image: traefik:v3.1
    command: 
      - "--api.insecure=true" # Permettre l'accès aux Dashboard de Traefik
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"  # Désactive l'exposition automatique des conteneur à Traefik
      # Ces lignes définissent les ports d'écoute : 
      # port 80 pour HTTP et 443 pour HTTPS.
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=s.badir@outlook.com"
      # # Stockage certificats
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "8080:8080" # traefik dashboard
      - "443:443"
    volumes:
    # important car ça permet à traefik de monitorer les containers docker
      - /var/run/docker.sock:/var/run/docker.sock
      - letsencrypt:/letsencrypt
    labels:
      -"traefik.enable=true"
 
  api:
    build: 
      context: ./api
      dockerfile: Dockerfile
    deploy:
      mode: replicated
      replicas: 3
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8087/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    environment:
      - PYTHONUNBUFFERED=0
      - PYTHONPATH=/app
    labels:
      - "traefik.enable=true"
      # [NAMING] Utilisez des noms descriptifs pour les routers
      - "traefik.http.routers.api-router.rule=PathPrefix(`/api`)"
      # Router HTTP pour redirection
      - "traefik.http.routers.api.entrypoints=web"
      - "traefik.http.routers.api.rule=Host(`${DOMAIN_NAME}`) && Path(`/api`)"
      - "traefik.http.routers.api.middlewares=redirect-to-https@docker"
      # Router HTTPS sécurisé
      - "traefik.http.routers.api-secure.entrypoints=websecure"
      - "traefik.http.routers.api-secure.rule=Host(`${DOMAIN_NAME}`) && Path(`/api`)"
      - "traefik.http.routers.api-secure.tls=true"
      - "traefik.http.routers.api-secure.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # [PORT] Port interne de l'application
      - "traefik.http.services.api-service.loadbalancer.server.port=8087"
    command: >
      sh -c "export DATABASE_URL=postgresql://`cat /run/secrets/postgres_user`:`cat /run/secrets/postgres_password`@db:5432/clickdb &&
             python sample_api.py"
    depends_on:
      db : 
        condition : service_healthy
    secrets:
      - postgres_password
      - postgres_user

  db:
    image: postgres:16
    healthcheck:
      test: ["CMD", "pg_isready"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=clickdb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    secrets:
      - postgres_password
      - postgres_user

  ui:
    build:
      context: ./web_app
      dockerfile: Dockerfile
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 30s
    # ports:
      # - "127.0.0.1:8501:8501" # Plus besoin avec Traefik
    labels:
      - "traefik.enable=true"
      # [NAMING] Utilisez des noms descriptifs pour les routers
      - "traefik.http.routers.ui-router.rule=PathPrefix(`/`)"
      # Router HTTP pour redirection
      - "traefik.http.routers.ui-router.entrypoints=web"
      - "traefik.http.routers.ui-router.rule=Host(`${DOMAIN_NAME}`) && Path(`/`)"
      - "traefik.http.routers.ui-router.middlewares=redirect-to-https@docker"
      # Router HTTPS sécurisé
      - "traefik.http.routers.ui-secure.entrypoints=websecure"
      - "traefik.http.routers.ui-secure.rule=Host(`${DOMAIN_NAME}`) && Path(`/`)"
      - "traefik.http.routers.ui-secure.tls=true"
      - "traefik.http.routers.ui-secure.tls.certresolver=letsencrypt"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # [PORT] Port interne de l'application
      - "traefik.http.services.ui-service.loadbalancer.server.port=8501"
    depends_on:
      - api

volumes:
  postgres_data:

secrets:
  postgres_password:
    file: ./secrets/postgres_password.txt
  postgres_user:
    file: ./secrets/postgres_user.txt 
